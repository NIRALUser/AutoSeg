PROJECT(AUTOSEG)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
CMAKE_POLICY(VERSION 2.8)

IF(CMAKE_COMPILER_2005)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
ENDIF(CMAKE_COMPILER_2005)

IF (${CMAKE_SOURCE_DIR} STREQUAL ${AUTOSEG_SOURCE_DIR})
  SET (LIBRARY_OUTPUT_PATH ${AUTOSEG_BINARY_DIR}/lib CACHE PATH "Single output directory for building all libraries.")
  SET (EXECUTABLE_OUTPUT_PATH ${AUTOSEG_BINARY_DIR}/bin CACHE PATH "Single output directory for building all executables.")
ENDIF (${CMAKE_SOURCE_DIR} STREQUAL ${AUTOSEG_SOURCE_DIR})

set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR} CACHE PATH "Install path prefix, prepended onto install directories." FORCE)
set(CMAKE_HELPER_DIR ${CMAKE_CURRENT_SOURCE_DIR}/CMake)
include(ExternalProject)
include(${CMAKE_HELPER_DIR}/CMakeBuildMacros.cmake)
include(${CMAKE_HELPER_DIR}/PreventInSourceBuilds.cmake)
include(${CMAKE_HELPER_DIR}/CMakeCommonExternalDefinitions.cmake)

FIND_PACKAGE(FLTK REQUIRED)

#External Projects
include(ExternalProject)
if(CMAKE_EXTRA_GENERATOR)
  set(gen "${CMAKE_EXTRA_GENERATOR} - ${CMAKE_GENERATOR}")
else()
  set(gen "${CMAKE_GENERATOR}")
endif()

PACKAGE_NEEDS_ITK("${LOCAL_CMAKE_BUILD_OPTIONS}" "${gen}")
PACKAGE_NEEDS_VTK_NOGUI("${LOCAL_CMAKE_BUILD_OPTIONS}" "${gen}")
PACKAGE_NEEDS_SlicerExecutionModel("${LOCAL_CMAKE_BUILD_OPTIONS}" "${gen}")

OPTION(COMPILE_AUTOSEG "Compile AutoSeg." ON)
IF(COMPILE_AUTOSEG)
  set(proj AutoSeg)
  ExternalProject_Add(${proj}
    DOWNLOAD_COMMAND ""
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/${proj}
    BINARY_DIR ${proj}-build
    DEPENDS ${ITK_DEPEND}
    CMAKE_GENERATOR ${gen}
    CMAKE_ARGS
      ${LOCAL_CMAKE_BUILD_OPTIONS}
      -DITK_DIR:PATH=${ITK_DIR}
      -DFLTK_DIR:PATH=${FLTK_DIR}
    INSTALL_COMMAND ""
    INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
  )
  FORCE_BUILD_CHECK(${proj})
ENDIF(COMPILE_AUTOSEG)

OPTION(COMPILE_EXTERNAL_NIRAL_UTILITIES "Compile NIRALUtilities." ON)
IF(COMPILE_EXTERNAL_NIRAL_UTILITIES)
  OPTION(COMPILE_EXTERNAL_CONVERTITKFORMATS "Compile ConvertITKformats." ON)
  OPTION(COMPILE_EXTERNAL_IMAGESTAT "Compile ImageStat." ON)
  OPTION(COMPILE_EXTERNAL_IMAGEMATH "Compile ImageMath." ON)
  OPTION(COMPILE_EXTERNAL_INTENSITYRESCALER "Compile IntensityRescaler." OFF)
  set(proj NIRALUtilities)
  ExternalProject_Add(${proj}
    SVN_REPOSITORY "https://www.nitrc.org/svn/niral_utilities/trunk/"
    SVN_USERNAME slicerbot
    SVN_PASSWORD slicer
    SOURCE_DIR ${proj}
    BINARY_DIR ${proj}-build
    DEPENDS ${ITK_DEPEND} ${VTK_DEPEND}
    CMAKE_GENERATOR ${gen}
    CMAKE_ARGS
      ${LOCAL_CMAKE_BUILD_OPTIONS}
      -DITK_DIR:PATH=${ITK_DIR}
      -DVTK_DIR:PATH=${VTK_DIR}
      -DCOMPILE_CONVERTITKFORMATS:BOOL=${COMPILE_EXTERNAL_CONVERTITKFORMATS}
      -DCOMPILE_IMAGESTAT:BOOL=${COMPILE_EXTERNAL_IMAGESTAT}
      -DCOMPILE_IMAGEMATH:BOOL=${COMPILE_EXTERNAL_IMAGEMATH}
      -DCOMPILE_INTENSITYRESCALER:BOOL=${COMPILE_EXTERNAL_INTENSITYRESCALER}
    INSTALL_COMMAND ""
    INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
  )
  FORCE_BUILD_CHECK(${proj})
ENDIF(COMPILE_EXTERNAL_NIRAL_UTILITIES)

OPTION(COMPILE_EXTERNAL_CORTTHICK "Compile CortThick." ON)
IF(COMPILE_EXTERNAL_CORTTHICK)
  set(proj CortThick)
  ExternalProject_Add(${proj}
    SVN_REPOSITORY "https://www.nitrc.org/svn/arctic/trunk/CortThick/"
    SVN_USERNAME slicerbot
    SVN_PASSWORD slicer
    SOURCE_DIR ${proj}
    BINARY_DIR ${proj}-build
    DEPENDS ${ITK_DEPEND} ${GenerateCLP_DEPEND} ${VTK_DEPEND}
    CMAKE_GENERATOR ${gen}
    CMAKE_ARGS
      ${LOCAL_CMAKE_BUILD_OPTIONS}
      -DITK_DIR:PATH=${ITK_DIR}
      -DFLTK_DIR:PATH=${FLTK_DIR}
      -DGenerateCLP_DIR:PATH=${GenerateCLP_DIR}
      -DVTK_DIR:PATH=${VTK_DIR}
    INSTALL_COMMAND ""
    INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
  )
  FORCE_BUILD_CHECK(${proj})
ENDIF(COMPILE_EXTERNAL_CORTTHICK)

OPTION(COMPILE_EXTERNAL_SEGPOSTPROCESSCLP "Compile SegPostProcessCLP." ON)
IF(COMPILE_EXTERNAL_SEGPOSTPROCESSCLP)
  set(proj SegPostProcessCLP)
  ExternalProject_Add(${proj}
    SVN_REPOSITORY "https://www.nitrc.org/svn/spharm-pdm/Applications/SegPostProcessCLP/"
    SVN_USERNAME slicerbot
    SVN_PASSWORD slicer
    SOURCE_DIR ${proj}
    BINARY_DIR ${proj}-build
    DEPENDS ${ITK_DEPEND} ${GenerateCLP_DEPEND}
    CMAKE_GENERATOR ${gen}
    CMAKE_ARGS
      ${LOCAL_CMAKE_BUILD_OPTIONS}
      -DGenerateCLP_DIR:PATH=${GenerateCLP_DIR}
      -DITK_DIR:PATH=${ITK_DIR}
    INSTALL_COMMAND ""
    INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
  )
  FORCE_BUILD_CHECK(${proj})
ENDIF(COMPILE_EXTERNAL_SEGPOSTPROCESSCLP)

OPTION(COMPILE_EXTERNAL_ABC "Compile External ABC." ON)
IF(COMPILE_EXTERNAL_ABC)
  set(proj abc)
  ExternalProject_Add(${proj}
    SVN_REPOSITORY "https://www.nitrc.org/svn/abc/tags/ABC-REL1.4.1/"
    SVN_USERNAME slicerbot
    SVN_PASSWORD slicer
    SOURCE_DIR ${proj}
    BINARY_DIR ${proj}-build
    DEPENDS  ${ITK_DEPEND}
    CMAKE_GENERATOR ${gen}
    CMAKE_ARGS
      ${LOCAL_CMAKE_BUILD_OPTIONS}
      -DGenerateCLP_DIR:PATH=${GenerateCLP_DIR}
      -DITK_DIR:PATH=${ITK_DIR}
      -DCOMPILE_SLICER3COMMANDLINE:BOOL=OFF
      -DCOMPILE_COMMANDLINE:BOOL=COMPILE_EXTERNAL_ABC
    INSTALL_COMMAND ""
    INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
  )
ENDIF(COMPILE_EXTERNAL_ABC)

OPTION(COMPILE_EXTERNAL_BATCHMAKE "Compile External BatchMake." ON)
IF(COMPILE_EXTERNAL_BATCHMAKE)
  set(proj BatchMake)
  ExternalProject_Add(${proj}
    CVS_REPOSITORY ":pserver:anoncvs@batchmake.org:/cvsroot/BatchMake"
    CVS_MODULE "BatchMake"
    CVS_TAG -r BatchMake-1-3
    UPDATE_COMMAND ""
    SOURCE_DIR ${proj}
    BINARY_DIR ${proj}-build
    DEPENDS ${ITK_DEPEND}
    CMAKE_GENERATOR ${gen}
    CMAKE_ARGS
      ${LOCAL_CMAKE_BUILD_OPTIONS}
      -DBUILD_SHARED_LIBS:BOOL=${BUILD_SHARED_LIBS}
      -DITK_DIR:PATH=${ITK_DIR}
    INSTALL_COMMAND ""
    INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}
  )
ENDIF(COMPILE_EXTERNAL_BATCHMAKE)
